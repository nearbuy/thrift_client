#
# Autogenerated by Thrift Compiler
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

    module Async
      module Greeter
        class Client
          include ::Thrift::AsyncClient

          def greeting(name)
            @seqid += 1
            d = @callbacks[@seqid] = deferrable
            send_greeting(name)
            return d
          end

          def send_greeting(name)
            send_message('greeting', Greeting_args, :name => name)
          end

          def recv_greeting(iprot, mtype, rseqid)
            d = @callbacks.delete(rseqid)
            if mtype == Thrift::MessageTypes::EXCEPTION
              x = ApplicationException.new
              x.read(iprot)
              iprot.read_message_end
              d.fail(x)
              return
            end
            result = Greeting_result.new
            result.read(iprot)
            iprot.read_message_end
            return d.succeed(result.success) unless result.success.nil?
            d.fail(::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'greeting failed: unknown result'))
          end

          def delayed_greeting(name, sleep_seconds)
            @seqid += 1
            d = @callbacks[@seqid] = deferrable
            send_delayed_greeting(name, sleep_seconds)
            return d
          end

          def send_delayed_greeting(name, sleep_seconds)
            send_message('delayed_greeting', Delayed_greeting_args, :name => name, :sleep_seconds => sleep_seconds)
          end

          def recv_delayed_greeting(iprot, mtype, rseqid)
            d = @callbacks.delete(rseqid)
            if mtype == Thrift::MessageTypes::EXCEPTION
              x = ApplicationException.new
              x.read(iprot)
              iprot.read_message_end
              d.fail(x)
              return
            end
            result = Delayed_greeting_result.new
            result.read(iprot)
            iprot.read_message_end
            return d.succeed(result.success) unless result.success.nil?
            d.fail(::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'delayed_greeting failed: unknown result'))
          end

          def yo(name)
            @seqid += 1
            send_yo(name)
            d = deferrable
            d.succeed
            return d
          end

          def send_yo(name)
            send_message('yo', Yo_args, :name => name)
          end
        end

        class Processor
          include ::Thrift::Processor

          def process_greeting(seqid, iprot, oprot)
            args = read_args(iprot, Greeting_args)
            result = Greeting_result.new()
            result.success = @handler.greeting(args.name)
            write_result(result, oprot, 'greeting', seqid)
          end

          def process_delayed_greeting(seqid, iprot, oprot)
            args = read_args(iprot, Delayed_greeting_args)
            result = Delayed_greeting_result.new()
            result.success = @handler.delayed_greeting(args.name, args.sleep_seconds)
            write_result(result, oprot, 'delayed_greeting', seqid)
          end

          def process_yo(seqid, iprot, oprot)
            args = read_args(iprot, Yo_args)
            @handler.yo(args.name)
            return
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class Greeting_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          NAME = 1

          FIELDS = {
            NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Greeting_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Delayed_greeting_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          NAME = 1
          SLEEP_SECONDS = 2

          FIELDS = {
            NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
            SLEEP_SECONDS => {:type => ::Thrift::Types::DOUBLE, :name => 'sleep_seconds'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Delayed_greeting_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Yo_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          NAME = 1

          FIELDS = {
            NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Yo_result
          include ::Thrift::Struct, ::Thrift::Struct_Union

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
